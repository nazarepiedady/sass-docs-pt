---
title: Fundamentos de Sass
introduction: >
  Antes de poderes usar a Sass, precisas de configurar o teu projeto. Se quiseres apenas pesquisar aqui, v√° em frente, mas recomendamos-te primeiro ir instalar a Sass. [Siga para aqui](/install) se quiseres aprender a como ter tudo configurado.
---

- content_for :navigation do
  %h3 T√≥picos

  %nav.sl-c-list-navigation-wrapper
    :markdown
      - [Pr√©-Processamento](#topic-1)
      - [Vari√°veis](#topic-2)
      - [Encaixamento](#topic-3)
      - [Parciais](#topic-4)
      - [M√≥dulos](#topic-5)
      - [Misturas](#topic-6)
      - [Heran√ßa](#topic-7)
      - [Operadores](#topic-8)
      - [Listas](#topic-9)

%section#topic-1
  :markdown
    <h2 id="preprocessing">Pr√©-Processamento</h2>

    A CSS em si mesma pode ser divertida, mas as folhas de estilos est√£o a ficar maiores, mais complexas, e mais dif√≠ceis de manter. √â aqui onde um pr√©-processador pode ajudar. A Sass tem funcionalidades que n√£o existem na CSS ainda como encaixamento, misturas, heran√ßa, e outras fant√°sticas guloseimas que ajudam-te a escrever CSS robusto e sustent√°vel.

    Assim que come√ßares a emendar com a Sass, ela receber√° o teu ficheiro de Sass pr√©-processado e guarda-lo-√° como ficheiro de CSS normal que podes usar na tua p√°gina.

    A maneira mais direta de fazer isto acontecer √© no teu terminal. Assim que a Sass estiver instalada, podes compilar o teu Sass para CSS usando o comando `sass`. Precisar√°s de dizer a Sass o ficheiro a partir do qual construir√°s, e para onde produzir√° a CSS. Por exemplo, executar `sass input.scss output.css` a partir do teu terminal receberia um √∫nico ficheiro de Sass, `input.scss`, e compila este ficheiro para `output.css`.

    Tu podes tamb√©m observar ficheiros ou diret√≥rios individuais com a op√ß√£o `--watch`. A op√ß√£o observar fiz a Sass para observar os teus ficheiros de fonte por mudan√ßas, e recompilar a CSS cada vez que guardares a teu ficheiro de Sass. Se querias observar (no lugar de construir manualmente) o teu ficheiro `input.scss`, apenas adicionarias a op√ß√£o observar ao teu comando, desta maneira:

        sass --watch input.scss output.css

    Tu podes observar e produzir para os diret√≥rios usando caminhos de pasta como a tua entrada e sa√≠da, e separ√°-los com um sinal de dois pontos. Neste exemplo:

  = partial 'code-snippets/homepage-sass-watch'

  :markdown
    A Sass observaria todos os ficheiros na pasta `app/sass` por mudan√ßas, e compilaria a CSS para a pasta `public/stylesheets`.

  .sl-c-callout.sl-c-callout--fun-fact
    :markdown
      <h3 id="fun-fact">üí° Fato Divertido</h3>

      A Sass tem duas sintaxes! A sintaxe de SCSS (`.scss`) √© a mais comummente usada. √â um superconjunto de CSS, o que significa que todo CSS v√°lido tamb√©m √© SCSS v√°lido. A sintaxe indentada (`.sass`) √© mais rara: usa indenta√ß√£o no lugar de chavetas para encaixar declara√ß√µes, e novas linhas no lugar de sinais de pontos e v√≠rgulas para separ√°-los. Todos os nossos exemplos est√£o dispon√≠veis em ambas sintaxes.

  %hr

%section#topic-2
  :markdown
    <h2 id="variables">Vari√°veis</h2>

    Pense em vari√°veis como uma maneira de armazenar informa√ß√£o que queres reutilizar ao longo da tua folha de estilo. Tu podes armazenar coisas como cores, pilhas de fonte, ou qualquer valor de CSS que pensas em reutilizar. A Sass usa o s√≠mbolo `$` para tornar algo numa vari√°vel. C√° est√° um exemplo:

  - example do
    :plain
      $font-stack: Helvetica, sans-serif;
      $primary-color: #333;

      body {
        font: 100% $font-stack;
        color: $primary-color;
      }
      ===
      $font-stack: Helvetica, sans-serif
      $primary-color: #333

      body
        font: 100% $font-stack
        color: $primary-color

  :markdown
    Quando a Sass for processada, recebe as vari√°veis que definimos para a `$font-stack` e `$primary-color` e gera CSS normal com os valores da nossa vari√°vel colocados na CSS. Isto pode ser extremamente poderoso quando trabalhamos com cores de marca  e procuramos mant√™-las consistentes ao longo da p√°gina.

    ---

%section#topic-3
  :markdown
    <h2 id="nesting">Encaixamento</h2>

    Quando escreves HTML provavelmente tens reparado que tem um hierarquia visual clara e encaixada. A CSS por outro lado, n√£o tem.

    A Sass permitir-te-√° encaixar os teus seletores de CSS de uma maneira que segue a mesma hierarquia visual do teu HTML. Esteja ciente de que regras demasiadamente encaixadas resultar√£o em CSS muito qualificado que poderiam provar-se dif√≠cil de manter e √© geralmente considerado m√° pr√°tica.

    Com isto em mente, c√° est√° um exemplo de alguns estilos normais para uma navega√ß√£o da p√°gina:

  - example do
    :plain
      nav {
        ul {
          margin: 0;
          padding: 0;
          list-style: none;
        }

        li { display: inline-block; }

        a {
          display: block;
          padding: 6px 12px;
          text-decoration: none;
        }
      }
      ===
      nav
        ul
          margin: 0
          padding: 0
          list-style: none

        li
          display: inline-block

        a
          display: block
          padding: 6px 12px
          text-decoration: none

  :markdown
    Notar√°s que os seletores `ul`, `li`, e `a` s√£o encaixados dentro do seletor `nav`. Isto √© uma excelente maneira de organizar a tua CSS e torn√°-la mais leg√≠vel.

    ---

%section#topic-4
  :markdown
    <h2 id="partials">Parciais</h2>

    Tu podes criar ficheiros de Sass parciais que cont√™m pequenos trechos de CSS que podes incluir em outros ficheiros de Sass. Isto √© uma excelente maneira de organizar em m√≥dulos a tua CSS e ajuda a manter as coisas mais f√°cil de manter. Um parcial √© um ficheiro de Sass nomeado com um sublinhado antes do nome. Tu podes nomear algo como `_partial.scss`. O sublinhado permite que Sass saiba que o ficheiro √© apenas um ficheiro parcial e que n√£o deveria ser gerado num ficheiro de CSS. Os parciais de Sass s√£o usados com a regra `@use`.

    ---

%section#topic-5
  %h2{:id => 'modules'} M√≥dulos
  = partial 'documentation/snippets/module-system-status'

  :markdown
    Tu n√£o tens de escrever todo o teu c√≥digo de Sass num √∫nico ficheiro. Tu podes separ√°-lo de qualquer modo que quiseres com a regra `@use`. Esta regra carrega um outro ficheiro de Sass como um *m√≥dulo*, o que significa que podes fazer refer√™ncia as suas vari√°veis, [misturas][mixins], e [fun√ß√µes][functions] no teu ficheiro de Sass com um espa√ßo de nome baseado no nome do ficheiro. Usar um ficheiro tamb√©m incluir√° o CSS que gera no tua sa√≠da compilada:

    [mixins]: #topic-6
    [functions]: documentation/at-rules/function

  - example do
    :plain
      // _base.scss
      $font-stack: Helvetica, sans-serif;
      $primary-color: #333;

      body {
        font: 100% $font-stack;
        color: $primary-color;
      }
      ---
      // styles.scss
      @use 'base';

      .inverse {
        background-color: base.$primary-color;
        color: white;
      }
      ===
      // _base.sass
      $font-stack: Helvetica, sans-serif
      $primary-color: #333

      body
        font: 100% $font-stack
        color: $primary-color
      ---
      // styles.sass
      @use 'base'

      .inverse
        background-color: base.$primary-color
        color: white
      ===
      body {
        font: 100% Helvetica, sans-serif;
        color: #333;
      }

      .inverse {
        background-color: #333;
        color: white;
      }

  :markdown
    Repara que usamos `@use 'base';` no ficheiro `styles.scss`. Quando usas um ficheiro n√£o precisas de incluir a extens√£o do ficheiro. A Sass √© inteligente e compreender√° por ti.

    ---

%section#topic-6
  :markdown
    <h2 id="mixins">Misturas</h2>

    Algumas coisas na CSS s√£o um pouco tediosas de escrever, especialmente com a CSS3 e os muitos prefixos ambulantes que existem. Uma mistura permite-te fazer grupos de declara√ß√µes de CSS que queres reduzir ao longo da tua p√°gina. Ela ajuda a manter tua Sass limpa segundo a pr√°tica do n√£o repetir-se ou DRY. Tu podes mesmo passar valores para tornar a tua mistura mais flex√≠vel. C√° est√° um exemplo para `theme`:

  - example do
    :plain
      @mixin theme($theme: DarkGray) {
        background: $theme;
        box-shadow: 0 0 1px rgba($theme, .25);
        color: #fff;
      }

      .info {
        @include theme;
      }
      .alert {
        @include theme($theme: DarkRed);
      }
      .success {
        @include theme($theme: DarkGreen);
      }
      ===
      @mixin theme($theme: DarkGray)
        background: $theme
        box-shadow: 0 0 1px rgba($theme, .25)
        color: #fff


      .info
        @include theme

      .alert
        @include theme($theme: DarkRed)

      .success
        @include theme($theme: DarkGreen)

  :markdown
    Para criares uma mistura usas a diretiva `@mixin` e d√°s-lhe um nome. Nomeamos a nossa mistura de `theme`. Tamb√©m estamos a usar a vari√°vel `$theme` dentro dos par√™ntesis assim podemos passar um `theme` de qualquer coisa que quisermos. Depois de criares a tua mistura, podes ent√£o us√°-la como declara√ß√£o de CSS come√ßando com `@include` seguida pelo nome da mistura.

    ---

%section#topic-7
  :markdown
    <h2 id="extend-inheritance">Extens√£o / Heran√ßa</h2>

    O uso de `@extend` permite-te partilhar um conjunto de propriedades de CSS de um seletor para um outro. No nosso exemplo criaremos um s√©rie simples de mensagens para erros, avisos e sucessos usando uma outra funcionalidade que adam de m√£os dadas com estender, classes de espa√ßo reservado. Uma classe de espa√ßo reservado √© um tipo especial de classe que apenas imprime quando for estendida, e pode ajudar a manter o teu CSS compilado arrumado e limpo:

  - example do
    :plain
      /* This CSS will print because %message-shared is extended. */
      %message-shared {
        border: 1px solid #ccc;
        padding: 10px;
        color: #333;
      }

      // This CSS won't print because %equal-heights is never extended.
      %equal-heights {
        display: flex;
        flex-wrap: wrap;
      }

      .message {
        @extend %message-shared;
      }

      .success {
        @extend %message-shared;
        border-color: green;
      }

      .error {
        @extend %message-shared;
        border-color: red;
      }

      .warning {
        @extend %message-shared;
        border-color: yellow;
      }
      ===
      /* This CSS will print because %message-shared is extended. */
      %message-shared
        border: 1px solid #ccc
        padding: 10px
        color: #333


      // This CSS won't print because %equal-heights is never extended.
      %equal-heights
        display: flex
        flex-wrap: wrap


      .message
        @extend %message-shared


      .success
        @extend %message-shared
        border-color: green


      .error
        @extend %message-shared
        border-color: red


      .warning
        @extend %message-shared
        border-color: yellow

  :markdown
    O que o c√≥digo acima faz √© dizer `.message`, `.success`, `.error`, e `.warning` para comportarem-se tal como `%message-shared`. Isto significa que em qualquer parte que `%message-shared` aparecer, `.message`, `.success`, `.error`, e `.warning` tamb√©m aparecer√£o. A magia acontece no CSS gerado, onde cada uma destas classes receber√£o as propriedades de CSS que `%message-shared` recebe. Isto ajuda-te a evitar ter de escrever v√°rios nomes de classe sobre elementos de HTML.

    Tu podes estender a maioria dos seletores de CSS simples al√©m das classes de espa√ßo reservado na Sass, mas usar os espa√ßos reservados √© a maneira mais f√°cil de garantir que n√£o est√°s a estender uma classe que √© encaixada noutro lado no teus estilos, o que pode resultar em seletores n√£o intencionados no teu CSS.

    Nota que a CSS no `%equal-heights` n√£o √© gerada, porque `%equal-heights` nunca foi estendida.

    ---

%section#topic-8
  :markdown
    <h2 id="operators">Operadores</h2>

    Fazer c√°lculos no teu CSS √© muito √∫til. A Sass tem um m√£o-cheia de operadores matem√°ticos padr√£o como `+`, `-`, `*`, `math.div()`, e `%`. No nosso exemplo faremos alguns c√°lculos simples para calcular as larguras para um `article` e `aside`:

  - example do
    :plain
      @use "sass:math";

      .container {
        display: flex;
      }

      article[role="main"] {
        width: math.div(600px, 960px) * 100%;
      }

      aside[role="complementary"] {
        width: math.div(300px, 960px) * 100%;
        margin-left: auto;
      }
      ===
      @use "sass:math"

      .container
        display: flex

      article[role="main"]
        width: math.div(600px, 960px) * 100%

      aside[role="complementary"]
        width: math.div(300px, 960px) * 100%
        margin-left: auto
      ===
      .container {
        display: flex;
      }

      article[role="main"] {
        width: 62.5%;
      }

      aside[role="complementary"] {
        width: 31.25%;
        margin-left: auto;
      }

  :markdown
    Criamos uma grade flu√≠da muito simples, baseada nm 960px. As opera√ß√µes na Sass permitem-nos fazer algo como pegar valores em p√≠xeis e convert√™-los em percentagens sem muita complica√ß√£o.

    ---
