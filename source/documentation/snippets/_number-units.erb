## Unidades

A Sass tem poderoso suporte para manipulação de unidades baseada em como os [cálculos de unidade do mundo real][real-world unit calculations] funcionam. Quando dois números forem multiplicados, suas unidades também são multiplicadas. Quando um número é dividido por um outro, o resultado recebe as unidades do seu numerador do primeiro número e as unidades do seu denominador do segundo número. Um número pode ter qualquer número de unidades no numerador e/ou no denominador.

[real-world unit calculations]: https://en.wikipedia.org/wiki/Unit_of_measurement#Calculations_with_units_of_measurement

<% example(autogen_css: false) do %>
  @debug 4px * 6px; // 24px*px (read "square pixels")
  @debug math.div(5px, 2s); // 2.5px/s (read "pixels per second")

  // 3.125px*deg/s*em (read "pixel-degrees per second-em")
  @debug 5px * math.div(math.div(30deg, 2s), 24em);

  $degrees-per-second: math.div(20deg, 1s);
  @debug $degrees-per-second; // 20deg/s
  @debug math.div(1, $degrees-per-second); // 0.05s/deg
  ===
  @debug 4px * 6px  // 24px*px (read "square pixels")
  @debug math.div(5px, 2s)  // 2.5px/s (read "pixels per second")

  // 3.125px*deg/s*em (read "pixel-degrees per second-em")
  @debug 5px * math.div(math.div(30deg, 2s), 24em)

  $degrees-per-second: math.div(20deg, 1s)
  @debug $degrees-per-second  // 20deg/s
  @debug math.div(1, $degrees-per-second)  // 0.05s/deg
<% end %>

<% heads_up do %>
  Uma vez que a CSS não suporta unidades complexas como pixeis quadrado, usar um número com unidades complexas como um [valor de propriedade][property value] produzirá um erro. Mesmo assim isto é uma funcionalidade disfarçada; se não estiveres acabar com a unidade correta, normalmente significa que existe algo de errado com os teus cálculos! E lembra-te de que, podes sempre usar a [regra `@debug`][`@debug` rule] para confirmares as unidades de qualquer variável ou [expressão][expression].

  [property value]: /documentation/style-rules/declarations
  [`@debug` rule]: /documentation/at-rules/debug
  [expression]: /documentation/syntax/structure#expressions
<% end %>

A Sass converterá automaticamente entre unidades compatíveis, ainda que a unidade que escolherá para o resultado dependa de qual implementação de Sass estás a usar. Se experimentares combinar unidades incompatíveis, como `1in + 1em`, a Sass lançará um erro.

<% example(autogen_css: false) do %>
  // A CSS uma polegada como 96 pixeis.
  @debug 1in + 6px; // 102px or 1.0625in

  @debug 1in + 1s;
  //     ^^^^^^^^
  // Error: Incompatible units s and in.
  ===
  // A CSS uma polegada como 96 pixeis.
  @debug 1in + 6px  // 102px or 1.0625in

  @debug 1in + 1s
  //     ^^^^^^^^
  // Error: Incompatible units s and in.
<% end %>

De acordo com os cálculos de unidade no mundo real, ase o numerador contém unidades que são compatíveis com as unidades no denominador (como `math.dv(96px, 1in)`), anular-se-ão. Isto torna fácil definir uma proporção que podes usar ou converter entre unidades. No exemplo abaixo, definimos a velocidade desejada para um segundo por 50 pixeis, e depois multiplicamos este pelo número de pixeis que a transição ocupa para receber o tempo deveria levar.

<%# TODO(nweiz): auto-generate this CSS once we're compiling with Dart Sass %>

<% example do %>
  $transition-speed: math.div(1s, 50px);

  @mixin move($left-start, $left-stop) {
    position: absolute;
    left: $left-start;
    transition: left ($left-stop - $left-start) * $transition-speed;

    &:hover {
      left: $left-stop;
    }
  }

  .slider {
    @include move(10px, 120px);
  }
  ===
  $transition-speed: math.div(1s, 50px)

  @mixin move($left-start, $left-stop)
    position: absolute
    left: $left-start
    transition: left ($left-stop - $left-start) * $transition-speed

    &:hover
      left: $left-stop



  .slider
    @include move(10px, 120px)
  ===
  .slider {
    position: absolute;
    left: 10px;
    transition: left 2.2s;
  }
  .slider:hover {
    left: 120px;
  }
<% end %>

<% heads_up do %>
  Se a tua aritmética dá-te a unidade errada, provavelmente precisarás de verificar a tua matemática. Tu podes estar a deixar de usar as unidades para uma quantidade que deveria té-las! Ser claro quanto a unidade permite a Sass dar-te erros úteis quando algo não estiver correto.

  Tu deverias de maneira especial evitar usar interpolação como `#{$number}px`. Isto na verdade não cria um número! Isto cria uma [sequência de caracteres não citada ou que não é envolvida por aspas][unquoted string] que se *parece* como um número, mas não funcionará com quaisquer [operações de número][number operations] ou [funções][functions]. Tente tornar a tua matemática clara quanto a unidade para que `$number` já tenha a unidade `px`, ou escreva `$number * 1px`.

  [unquoted string]: /documentation/values/strings#unquoted
  [number operations]: /documentation/operators/numeric
  [functions]: /documentation/modules/math
<% end %>

<% heads_up do %>
  As percentagens na Sass funcionam tal como toda outra unidade. Elas *não* são permutáveis com decimais, porque nos decimais e percentagens de CSS significam coisas diferentes. Por exemplo, `50%` é um número com `%` como sua unidade, e a Sass o considera diferente do número `0.5`.

  Tu podes converter entre decimais e percentagens usando a aritmética de unidade. `math.div($percentage, 100%)` retornará o decimal correspondente, e `$decimal * 100%` retornará a percentagem correspondente. Tu podes também usar a [função `math.percentage()`][`math.percentage()` function] como uma maneira mais explícita de escrever `$decimal * 100%`.

  [`math.percentage()` function]: /documentation/modules/math#percentage
<% end %>
