---
title: Declarações de Propriedade
table_of_contents: true
introduction: >
  Na Sass assim como na CSS, as declarações de propriedade definem como os elementos que correspondem um seletor são estilizados. Porém a Sass adiciona funcionalidades adicionais para torná-las mais fáceis de escrever e automatizar. Antes de mais, um valor da declaração pode ser qualquer [expressão de SassScript](../syntax/structure#expressions), que será avaliada e incluída no resultado.
---

<% example do %>
  .circle {
    $size: 100px;
    width: $size;
    height: $size;
    border-radius: $size * 0.5;
  }
  ===
  .circle
    $size: 100px
    width: $size
    height: $size
    border-radius: $size * 0.5
<% end %>

<h2 id="interpolation">Interpolação</h2>

Um nome de propriedade pode incluir [interpolação][interpolation], o que torna possível gerar dinamicamente as propriedades quando necessário. Tu podes mesmo interpolar o nome da propriedade inteira!

[interpolation]: ../interpolation

<% example do %>
  @mixin prefix($property, $value, $prefixes) {
    @each $prefix in $prefixes {
      -#{$prefix}-#{$property}: $value;
    }
    #{$property}: $value;
  }

  .gray {
    @include prefix(filter, grayscale(50%), moz webkit);
  }
  ===
  @mixin prefix($property, $value, $prefixes)
    @each $prefix in $prefixes
      -#{$prefix}-#{$property}: $value

    #{$property}: $value


  .gray
    @include prefix(filter, grayscale(50%), moz webkit)
<% end %>

<h2 id="nesting">Encaixamento</h2>

Muitas propriedades de CSS começam com o mesmo prefixo que agem como tipo de espaço de nome. Por exemplo, `font-family`, `font-size`, e `font-weight` todas começam com `font-`. A Sass torna isto mais fácil e menos redundante permitindo que as declarações de propriedade sejam encaixadas. Os nomes da propriedade externa são adicionados à interna, separados por um hífen:

<% example do %>
  .enlarge {
    font-size: 14px;
    transition: {
      property: font-size;
      duration: 4s;
      delay: 2s;
    }

    &:hover { font-size: 36px; }
  }
  ===
  .enlarge
    font-size: 14px
    transition:
      property: font-size
      duration: 4s
      delay: 2s

    &:hover
      font-size: 36px
<% end %>

Algumas destas propriedades de CSS têm versões abreviadas que usam o espaço de nome de acordo com nome da propriedade. Para estas, podes escrever ambos valor abreviado *e* as versões encaixadas mais explícitas:

<% example do %>
  .info-page {
    margin: auto {
      bottom: 10px;
      top: 2px;
    }
  }
  ===
  .info-page
    margin: auto
      bottom: 10px
      top: 2px
<% end %>

<h2 id="hidden-declarations">Declarações Escondidas</h2>

Algumas vezes só queres que uma declaração de propriedade apareça por algum tempo. Se o valor de uma declaração for [`null`][] ou [sequência de caracteres sem aspas][unquoted string] vazia, a Sass não compilará esta declaração para o CSS:

[`null`]: ../values/null
[unquoted string]: ../values/strings#unquoted

<% example do %>
  $rounded-corners: false;

  .button {
    border: 1px solid black;
    border-radius: if($rounded-corners, 5px, null);
  }
  ===
  $rounded-corners: false

  .button
    border: 1px solid black
    border-radius: if($rounded-corners, 5px, null)
<% end %>

<h2 id="custom-properties">Propriedades Personalizadas</h2>

<% impl_status dart: true, libsass: '3.5.0', ruby: '3.5.0', feature: 'Sintaxe de SassScript' do %>
  As versões mais antigas de LibSass e Sass de Ruby analisavam as declarações de propriedade personalizadas tal como qualquer outra declaração de propriedade, permitindo a gama completa de expressões de SassScript como valores. Mesmo quando usares estas versões, é recomendado que uses a interpolação para injetar os valores de SassScript para compatibilidade para a frente.

  Consulte [a página de mudança de rutura][the breaking change page] por mais detalhes.

  [the breaking change page]: ../breaking-changes/css-vars
<% end %>

As [propriedades personalizadas de CSS][CSS custom properties], também conhecidas como variáveis de CSS, tem uma sintaxe de declaração invulgar: elas permitem praticamente qualquer texto valores das suas declarações. Além disto, estes valores são acessíveis ao JavaScript, então qualquer valor pode potencialmente ser relevante para o utilizador. Isto inclui valores que normalmente seriam analisados como SassScript.

[CSS Custom Properties]: https://developer.mozilla.org/en-US/docs/Web/CSS/--*

Por causa disto, a Sass analisa as declarações de propriedade personalizada de maneira diferente de outras declarações de propriedade. Todas as fichas, incluindo aqueles que se parecem com a SassScript, são passadas para CSS como são. A única exceção é [interpolação][interpolation], que é a única maneira de injetar valores dinâmicos para uma propriedade personalizada.

<!-- TODO(nweiz): auto-generate this CSS once we're compiling with Dart Sass -->

<% example do %>
  $primary: #81899b;
  $accent: #302e24;
  $warn: #dfa612;

  :root {
    --primary: #{$primary};
    --accent: #{$accent};
    --warn: #{$warn};

    // Even though this looks like a Sass variable, it's valid CSS so it's not
    // evaluated.
    --consumed-by-js: $primary;
  }
  ===
  $primary: #81899b
  $accent: #302e24
  $warn: #dfa612

  :root
    --primary: #{$primary}
    --accent: #{$accent}
    --warn: #{$warn}

    // Even though this looks like a Sass variable, it's valid CSS so it's not
    // evaluated.
    --consumed-by-js: $primary
  ===
  :root {
    --primary: #81899b;
    --accent: #302e24;
    --warn: #dfa612;
    --consumed-by-js: $primary;
  }
<% end %>

<% heads_up do %>
  Infelizmente, [interpolação][interpolation] remove as aspas das sequências de caracteres, o que a torna difícil usar sequências de caracteres com aspas como valores para propriedades personalizadas quando vêm das variáveis de Sass. Como uma maneira de dar a volta a isto, podes usar a [função `meta.inspect()`][`meta.inspect()` function] para preservar as aspas:

  [interpolation]: ../interpolation
  [`meta.inspect()` function]: ../modules/meta#inspect

  <% example do %>
    @use "sass:meta";

    $font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto;
    $font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;

    :root {
      --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)};
      --font-family-monospace: #{meta.inspect($font-family-monospace)};
    }
    ===
    @use "sass:meta"

    $font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto
    $font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas

    :root
      --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)}
      --font-family-monospace: #{meta.inspect($font-family-monospace)}
    ===
    :root {
      --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto;
      --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;
    }
  <% end %>
<% end %>
